version: '3.8'

services:
  zookeeper:
    networks:
      - financial-net
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_HEAP_OPTS: "-Xmx1G -Xms512M"
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60 
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_log:/var/lib/zookeeper/log
    restart: unless-stopped
    

  kafka:
    networks:
      - financial-net
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 60s
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  cassandra:
    networks:
      - financial-net
    image: cassandra:4.1
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: FinanceCluster
      CASSANDRA_HEAP_NEWSIZE: 128M
      CASSANDRA_MAX_HEAP_SIZE: 512M
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster' || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 15
    restart: unless-stopped

  postgres:
    networks:
      - financial-net
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: finance
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data_storage/postgresql/setup.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  spark-master:
    networks:
      - financial-net
    image: bitnami/spark:3.5
    environment:
      SPARK_MODE: master
      SPARK_DAEMON_MEMORY: 1g
    ports:
      - "8080:8080"
      - "7077:7077"
    restart: unless-stopped

  spark-worker:
    networks:
      - financial-net
    image: bitnami/spark:3.5
    depends_on:
      spark-master:
        condition: service_started
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2g
    restart: unless-stopped
    deploy:
      replicas: 2

  data-ingestion:
    networks:
      - financial-net
    build: ./data_ingestion
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./data_ingestion:/app
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "python -c 'from service import DataIngestionService; service = DataIngestionService()' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  data-analysis:
    networks:
      - financial-net
    build: ./data_analysis
    ports:
      - "5050:5000"
    depends_on:
      cassandra:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./data_analysis:/app
    restart: unless-stopped

  websocket-server:
    build: ./data_visualization
    ports:
      - "8765:8765"
    networks:
      - financial-net
    depends_on:
      - kafka
    command: python app.py

  data-visualization:
    image: nginx:alpine
    build: ./data_visualization
    ports:
      - "8080:80"
    volumes:
      - ./data_visualization/templates:/usr/share/ngsinx/html  # Mount HTML files
    networks:
      - financial-net
    depends_on:
      - postgres
      - kafka
      - websocket-server
networks:
  financial-net:
    driver: bridge
    
volumes:
  cassandra_data:
  postgres_data:
  zk_data:
  zk_log:
  kafka_data: